MAKE_STRING(myString, "apple");
MAKE_STRING(myString2, "Apple");

struct mt  {
    template <typename... List>
    struct apply {
        using type = std::tuple <List...>;
    };
};

/*
print_single_decluttered <
    compose <mt,
             placeholders::_1,
             compose <aritmetic_operators::add_<int>,
                      placeholders::_3,
                      placeholders::_4
              >
    >::merged
> (std::cout);
*/


//using gteCpy = bind <mt, placeholders::_1, int_<4>, float, logic_operators::lt_ OPEN placeholders::_2, placeholders::_3 CLOSE>;
//print_single_decluttered <gteCpy::template apply <int_<7>, int_<2>, int_<3> >::type> () << "\n";
